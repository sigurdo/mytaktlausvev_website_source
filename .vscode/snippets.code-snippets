{
	// Place your taktlausveven workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// },
	"UpdateForm": {
		"scope": "python",
		"prefix": "UpdateForm",
		"body": [
			"from django.forms import ModelForm",
			"class $1UpdateForm(ModelForm):",
			"    \"\"\"Form for creating a new $1 entry\"\"\"",
			"",
			"    class Meta:",
			"        model = $1",
			"        fields = [$2]",
			"",
		],
		"description": "Create a new UpdateForm",
	},
	"factory": {
		"scope": "python",
		"prefix": "factory",
		"body": [
			"from factory.django import DjangoModelFactory",
			"from factory import SubFactory",
			"from .models import $1",
			"class $1Factory(DjangoModelFactory):",
			"    class Meta:",
			"        model = $1",
			"",
			"    $2",
			"",
		],
		"description": "Create a new model factory"
	},
	"ModelTestSuite": {
		"scope": "python",
		"prefix": "ModelTestSuite",
		"body": [
			"from django.test import TestCase",
			"from common.mixins import TestMixin",
			"from .factories import $1Factory",
			"class $1TestSuite(TestMixin, TestCase):",
			"    def setUp(self):",
			"        self.$2 = $1Factory(name=\"$3\")",
			"",
			"    def test_to_str(self):",
			"        self.assertEqual(str(self.$2), \"$3\")",
			"",
		],
		"description": "Create a new TestSuite for a model",
	},
	"ViewTestSuite": {
		"scope": "python",
		"prefix": "ViewTestSuite",
		"body": [
			"from django.test import TestCase",
			"from django.urls import reverse",
			"from common.mixins import TestMixin",
			"class $1TestSuite(TestMixin, TestCase):",
			"    def get_url(self):",
			"        return reverse(\"$2:$1\")",
			"",
			"    def setUp(self):",
			"        ${3:pass}",
			"",
		],
		"description": "Create a new TestSuite for a view",
	},
	"ViewTestSuite_requires_login": {
		"scope": "python",
		"prefix": "ViewTestSuite_requires_login",
		"body": [
			"from django.test import TestCase",
			"from django.urls import reverse",
			"from common.mixins import TestMixin",
			"class $1TestSuite(TestMixin, TestCase):",
			"    def get_url(self):",
			"        return reverse(\"$2:$1\")",
			"",
			"    def setUp(self):",
			"        ${3:pass}",
			"",
			"    def test_requires_login(self):",
			"        self.assertLoginRequired(self.get_url())",
			"",
		],
		"description": "Create a new TestSuite for a view that requires login",
	},
	"ViewTestSuite_requires_permission": {
		"scope": "python",
		"prefix": "ViewTestSuite_requires_permission",
		"body": [
			"from django.test import TestCase",
			"from django.urls import reverse",
			"from common.mixins import TestMixin",
			"class $1TestSuite(TestMixin, TestCase):",
			"    def get_url(self):",
			"        return reverse(\"$2:$1\")",
			"",
			"    def setUp(self):",
			"        ${3:pass}",
			"",
			"    def test_requires_permission(self):",
			"        self.assertPermissionRequired(",
			"            self.get_url(),",
			"            \"$2.$4\",",
			"        )",
		],
		"description": "Create a new TestSuite for a view that requires permission",
	},
	"get_breadcrumb": {
		"scope": "python",
		"prefix": ["get_breadcrumb(cls, **kwargs)", "def get_breadcrumb(cls, **kwargs)", "@classmethod\ndef get_breadcrumb(cls, **kwargs)"],
		"body": [
			"@classmethod",
			"def get_breadcrumb(cls, $1**kwargs):",
			"    return Breadcrumb(",
			"        url=reverse(\"$4\", args=[$2]),",
			"        label=$3,",
			"    )"
		]
	},
	"Django template boilerplate": {
		"scope": "django-html",
		"prefix": ["boilerplate", "extends base.html"],
		"body": [
			"{% extends 'base.html' %}",
			"",
			"{% block title_page %}{{ $1 }}{% endblock title_page %}",
			"{% block title_content %}{{ $2 }}{% endblock title_content %}",
			"",
			"{% block header %}",
			"    {{ block.super }}",
			"",
			"    $3",
			"{% endblock header %}",
			"",
			"{% block content %}",
			"    $4",
			"{% endblock content %}",
			""
		],
		"description": "Django template boilerplate"
	}
}
